{"version":3,"sources":["features/data/dataSlice.js","components/datagrid/DataGrid.js","App.js","features/counter/counterSlice.js","features/data/dataSaga.js","app/store.js","serviceWorker.js","index.js"],"names":["dataSlice","createSlice","name","initialState","rows","headers","label","reducers","addRow","state","action","push","payload","id","cryptoId","length","addRowAsync","console","log","deleteRow","index","findIndex","row","splice","deleteRowAsync","updateRow","updateRowAsync","actions","selectRows","data","selectHeaders","useStyles","makeStyles","table","minWidth","EditableCell","children","dataId","cellName","props","useState","edit","setEdit","value","setValue","cellRef","useRef","dispatch","useDispatch","TableCell","ref","onBlur","onClick","TextField","onKeyPress","e","key","autoFocus","placeholder","String","onChange","target","Actions","IconButton","AddForm","useSelector","useForm","register","handleSubmit","errors","onSubmit","values","map","header","inputRef","required","style","marginRight","error","helperText","message","Button","type","variant","color","size","DataGrid","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","align","TableBody","Object","keys","join","App","Container","maxWidth","marginTop","CssBaseline","Typography","counterSlice","increment","decrement","incrementByAmount","dataSaga","delay","ms","Promise","res","setTimeout","put","takeEvery","sagaMiddleware","createSagaMiddleware","configureStore","reducer","counter","counterReducer","dataReducer","middleware","run","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cedd1a5.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport cryptoId from \"crypto-random-string\";\n\nconst headers = [\n  { label: \"Name\", name: \"name\" },\n  { label: \"Age\", name: \"age\" },\n  { label: \"Nationality\", name: \"nationality\" },\n  { label: \"Gender\", name: \"gender\" },\n  { label: \"Actions\", name: \"actions\" },\n];\n\nexport const dataSlice = createSlice({\n  name: \"data\",\n  initialState: {\n    rows: [],\n    headers: [...headers],\n  },\n  reducers: {\n    addRow: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.rows.push({ ...action.payload, id: cryptoId({ length: 10 }) });\n    },\n    addRowAsync: () => {\n      console.log(\"added row asynchronously\");\n    },\n    deleteRow: (state, action) => {\n      const index = state.rows.findIndex((row) => row.id === action.payload);\n      state.rows.splice(index, 1);\n    },\n    deleteRowAsync: () => {\n      console.log(\"deleted row asynchronously\");\n    },\n    updateRow: (state, action) => {\n      const index = state.rows.findIndex((row) => row.id === action.payload.id);\n      state.rows[index] = { ...state.rows[index], ...action.payload };\n    },\n    updateRowAsync: () => {\n      console.log(\"updated row asynchronously\");\n    },\n  },\n});\n\nexport const {\n  addRowAsync,\n  deleteRowAsync,\n  updateRowAsync,\n} = dataSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectRows = (state) => state.data.rows;\nexport const selectHeaders = (state) => state.data.headers;\n\nexport default dataSlice.reducer;\n","import React, { useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport {\n  addRowAsync,\n  deleteRowAsync,\n  updateRowAsync,\n  selectRows,\n  selectHeaders,\n} from \"../../features/data/dataSlice\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction EditableCell({ children, dataId, cellName, ...props }) {\n  const [edit, setEdit] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const cellRef = useRef();\n  const dispatch = useDispatch();\n\n  const handleCellClick = () => setEdit(true);\n\n  const handleClickAway = () => setEdit(false);\n\n  const handleKeyDown = (e) => {\n    if (e.key !== \"Enter\") return;\n    dispatch(updateRowAsync({ id: dataId, [cellName]: value }));\n    setEdit(false);\n  };\n\n  return (\n    <TableCell\n      ref={cellRef}\n      onBlur={handleClickAway}\n      onClick={handleCellClick}\n      {...props}\n    >\n      {edit ? (\n        <TextField\n          onKeyPress={handleKeyDown}\n          autoFocus\n          placeholder={children instanceof String ? children : null}\n          onChange={(e) => setValue(e.target.value)}\n        />\n      ) : (\n        children\n      )}\n    </TableCell>\n  );\n}\n\nfunction Actions({ data }) {\n  const dispatch = useDispatch();\n  return (\n    <IconButton onClick={() => dispatch(deleteRowAsync(data.id))}>\n      <DeleteIcon />\n    </IconButton>\n  );\n}\n\nfunction AddForm() {\n  const headers = useSelector(selectHeaders);\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n\n  const onSubmit = (values) => {\n    dispatch(addRowAsync(values));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {headers.map(\n        (header, index) =>\n          header.name !== \"actions\" && (\n            <TextField\n              name={header.name}\n              inputRef={register({\n                required: `Missing ${header.label}`,\n              })}\n              key={index}\n              label={header.label}\n              style={{ marginRight: 20 }}\n              error={!!errors[header.name]}\n              helperText={errors[header.name] && errors[header.name].message}\n            />\n          ),\n      )}\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">\n        Add\n      </Button>\n    </form>\n  );\n}\n\nexport default function DataGrid() {\n  const classes = useStyles();\n  const rows = useSelector(selectRows);\n  const headers = useSelector(selectHeaders);\n\n  return (\n    <>\n      <AddForm />\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              {headers.map((header) => (\n                <TableCell\n                  key={header.name}\n                  align={header.name === \"name\" ? \"left\" : \"right\"}\n                >\n                  {header.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow key={row.id}>\n                {Object.keys(row).map(\n                  (key, index) =>\n                    key !== \"id\" && (\n                      <EditableCell\n                        key={Object.keys(row).join(\"\") + index}\n                        dataId={row.id}\n                        cellName={key}\n                        align={key === \"name\" ? \"left\" : \"right\"}\n                      >\n                        {row[key]}\n                      </EditableCell>\n                    ),\n                )}\n                <TableCell align=\"right\">\n                  <Actions data={row} />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n}\n","import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport DataGrid from \"./components/datagrid/DataGrid\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container maxWidth=\"lg\" style={{ marginTop: 150 }}>\r\n      <CssBaseline />\r\n      <Typography variant=\"h2\" color=\"primary\">\r\n        Simple Human Accounting\r\n      </Typography>\r\n      <Typography variant=\"h6\" color=\"textPrimary\">\r\n        Instructions:\r\n        <ol>\r\n          <li>\r\n            Add more data using the add header form. Click button to add data.\r\n          </li>\r\n          <li>Edit cells via clicking on individual cells.</li>\r\n          <li>After changing cell data, press ENTER to commit changes.</li>\r\n          <li>\r\n            Delete row via clicking the trashcan icon on the far-right of the\r\n            row\r\n          </li>\r\n        </ol>\r\n      </Typography>\r\n      <DataGrid />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { put, takeEvery } from \"redux-saga/effects\";\n\n// server mocking\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n\nfunction* addRow(action) {\n  yield put({ type: \"data/addRow\", payload: action.payload });\n}\nfunction* deleteRow(action) {\n  yield put({ type: \"data/deleteRow\", payload: action.payload });\n}\nfunction* updateRow(action) {\n  yield put({ type: \"data/updateRow\", payload: action.payload });\n}\n\nfunction* dataSaga() {\n  yield delay(1000); // mocking a server\n  yield takeEvery(\"data/addRowAsync\", addRow);\n  yield takeEvery(\"data/deleteRowAsync\", deleteRow);\n  yield takeEvery(\"data/updateRowAsync\", updateRow);\n}\n\nexport default dataSaga;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport counterReducer from \"../features/counter/counterSlice\";\r\nimport dataReducer from \"../features/data/dataSlice\";\r\nimport dataSaga from \"../features/data/dataSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    data: dataReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(dataSaga);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}